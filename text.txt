Programming Assignment 4: Building a web server1. Description1.1 Web ServerThe goal of this assignment is to build a functional HTTP server. This assignment will teach you the basics of network programming, client/server structures, and issues in building high performance servers. At a high level, a web server listens for connections on a socket (bound to a specific port on a host machine). Clients connect to this socket and use a simple text-based protocol to retrieve files from the server. For example, you might try the following command from a LINUX machine: % telnet <ipaddress:port>GET / HTTP/1.1\n\n(type two carriage returns after the "GET" command). One of the key things to keep in mind in building your web server is that the server is translating relative filenames (such as index.html) to absolute filenames in a local file system. For example, you may decide to keep all the files for your server in cstudent/server/files/, which we call the root. When your server gets a request for /index.html, it will pre-pend the root to the specified file and determine if the file exists, and if the proper permissions are set on the file (typically the file has to be world readable). If the file does not exist, a file not found error is returned. If a file is present but the proper permissions are not set, a permission denied error is returned. Otherwise, an HTTP OK message is returned along with the contents of the file.You should also note that web servers typically translate "GET /" to "GET /index.html". That is, index.html is assumed to be the filename if no explicit filename is present. The default filename can also be overridden and defined to be some other file in most web servers.For this assignment, you will need to support enough of the HTTP protocol to allow an existing web browser (Firefox, Safari or Internet Explorer) to connect to your web server and retrieve the contents of a sample page from your server. (Of course, this will require that you copy the appropriate files to your server's document directory).At a high level, your web server will be structured something like the following: Forever loop:  Listen for connections  Accept new connection from incoming client  Parse HTTP request  Ensure well-formed request (return error otherwise)  Determine if target file exists and if permissions are set properly (return    error otherwise)  Transmit contents of file to connect (by performing reads on the file and writes on the socket)  Close the connectionYou your design choice in how you structure your web server in the context of the above simple structure•	A multi-threaded approach will spawn a new thread for each incoming connection. That is, once the server accepts a connection, it will spawn a thread to parse the request, transmit the file, etc. Finally, support the following HTTP command: •	GET: Retrieve the specified resource (HTML only files no pictures, embedded links, scripts, …)Please refer to the HTTP 1.0 RFC to learn more about the method syntax and error codes. You can check the validity of your implementation by issuing queries from a telnet session or from the client described in next section. Implement your assignment in either C or C++. You will want to become familiar with the interactions of the following system calls to build your system: socket(), select(), listen(), accept(), connect(). We outline a number of resources below with additional information on these system calls. Several books are also available on this topic.The format of the command line should be: myhttpServer [<port>]If <port> is not passed, you will choose your own default port number. Make sure it is larger than 1024 and less than 65536.3. SubmissionYou will write C++ (or C) code that compiles under the GCC (GNU Compiler Collection) environment. You have to make sure your code will compile and run correctly on a Linux Host. Please submit the source code with a make file, if used. Add a readme.txt file describing how to compile and run your program from a terminal. 